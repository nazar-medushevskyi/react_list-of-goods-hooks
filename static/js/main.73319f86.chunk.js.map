{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setType","isReversed","setReverse","isSortedDescending","goods","visibleGoods","sort","g1","g2","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAqCE,IAAME,EAAgB,WAC3B,MAA4BC,mBAASH,EAASI,MAA9C,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAiCH,oBAAS,GAA1C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EAAqBJ,IAAaL,EAASI,OAASG,EAEpDG,EA/BD,SACLA,EADK,GAGJ,IADCL,EACF,EADEA,SAAUE,EACZ,EADYA,WAGNI,EAAY,YAAOD,GAkBzB,OAhBAC,EAAaC,MAAK,SAACC,EAAIC,GACrB,OAAQT,GACN,KAAKL,EAASe,SACZ,OAAOF,EAAGG,cAAcF,GAC1B,KAAKd,EAASiB,OACZ,OAAOJ,EAAGK,OAASJ,EAAGI,OAExB,QACE,OAAO,OAIM,IAAfX,GACFI,EAAaQ,UAGRR,EAQOS,CAAkBnB,EAAiB,CAC/CI,WACAE,eAGF,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEhB,IAAaL,EAASe,SAClB,0BACA,iBAENQ,QAAS,kBAAMjB,EAAQN,EAASe,WAPlC,iCAYA,wBACEO,KAAK,SACLD,UACEhB,IAAaL,EAASiB,OAClB,6BACA,oBAENM,QAAS,kBAAMjB,EAAQN,EAASiB,SAPlC,4BAYA,wBACEK,KAAK,SACLD,UAAYd,EAER,oBADA,6BAEJgB,QAAS,kBAAMf,GAAYD,IAL7B,sBAUEE,GACA,wBACEa,KAAK,SACLD,UAAU,4BACVE,QAAS,WACPjB,EAAQN,EAASI,MACjBI,GAAW,IALf,sBAaJ,6BACE,6BACGE,EAAMc,KAAI,SAACC,GAAD,OACT,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,cCnHpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.73319f86.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType;\n  isReversed: boolean;\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((g1, g2) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return g1.localeCompare(g2);\n      case SortType.LENGTH:\n        return g1.length - g2.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed === true) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setType] = useState(SortType.NONE);\n  const [isReversed, setReverse] = useState(false);\n  const isSortedDescending = sortType === SortType.NONE && !isReversed;\n\n  const goods = getReorderedGoods(goodsFromServer, {\n    sortType,\n    isReversed,\n  });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            sortType !== SortType.ALPHABET\n              ? 'button is-info is-light'\n              : 'button is-info'\n          }\n          onClick={() => setType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            sortType !== SortType.LENGTH\n              ? 'button is-success is-light'\n              : 'button is-success'\n          }\n          onClick={() => setType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={!isReversed\n            ? 'button is-warning is-light'\n            : 'button is-warning'}\n          onClick={() => setReverse(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {!isSortedDescending && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setType(SortType.NONE);\n              setReverse(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {goods.map((good) => (\n            <li data-cy=\"Good\" key={good}>\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}